name: Playwright Tests Curl
on:
  workflow_dispatch
jobs:
  install:
    name: Setup Environment
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      PLAYWRIGHT_VERSION: ${{ steps.set-env.outputs.PLAYWRIGHT_VERSION }}
      STARTED_AT: ${{ steps.set-env.outputs.STARTED_AT }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Set STARTED_AT
        run: echo "STARTED_AT=$(date +%s)" >> $GITHUB_ENV

      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      # - name: Extract Playwright Version
      #   id: set-env
      #   run: |
      #     echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').dependencies['@playwright/test'].version)")" >> $GITHUB_ENV
      #     echo "STARTED_AT=${{ env.STARTED_AT }}" >> $GITHUB_OUTPUT
      #     echo "PLAYWRIGHT_VERSION=${{ env.PLAYWRIGHT_VERSION }}" >> $GITHUB_OUTPUT

      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').dependencies['@playwright/test'].version)")" >> $GITHUB_ENV

      - name: Cache Playwright binaries
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create Output for ENV Variables
        id: set-env
        run: |
          echo "PLAYWRIGHT_VERSION=${{env.PLAYWRIGHT_VERSION}}" >> $GITHUB_OUTPUT
          echo "STARTED_AT=${{env.STARTED_AT}}" >> $GITHUB_OUTPUT
          echo "APP_URL=${{env.APP_URL}}" >> $GITHUB_OUTPUT
          echo "PULL_REQUEST_URL=${{env.PULL_REQUEST_URL}}" >> $GITHUB_OUTPUT

  playwright-tests:
    name: Playwright Tests
    needs: install
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4, 5, 6]
        shardTotal: [6]
    outputs:
      playwright_version: ${{ steps.set-env.outputs.PLAYWRIGHT_VERSION }}
      started_at: ${{ steps.set-env.outputs.STARTED_AT}}
      app_url: ${{ steps.set-env.outputs.APP_URL}}
      pull_request_url: ${{ steps.set-env.outputs.PULL_REQUEST_URL }}

    env:
      APP_URL: 'https://your-app-url.com'
      user: ${{ secrets.USER }}
      pwd: ${{ secrets.PWD }}
      PLAYWRIGHT_VERSION: ${{ needs.install.outputs.PLAYWRIGHT_VERSION }}
      STARTED_AT: ${{ needs.install.outputs.STARTED_AT }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright binaries
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Run Playwright Tests â€“ Shard ${{ matrix.shardIndex }}
        run: npx playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

      - name: Save Summary (if exists)
        if: always()
        run: |
          mkdir -p playwright-report
          if [ -f summary.json ]; then
            cp summary.json playwright-report/summary.json
          fi

      - name: Upload Summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: report-${{ matrix.shardIndex }}
          path: playwright-report/
          retention-days: 2

      - name: Upload Blob Report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: blob-report-${{ matrix.shardIndex }}
          path: blob-report
          retention-days: 1
      - name: Create Output for ENV Variables
        if: always()
        id: set-env
        run: |
          echo "PLAYWRIGHT_VERSION=${{env.PLAYWRIGHT_VERSION}}" >> $GITHUB_OUTPUT
          echo "STARTED_AT=${{env.STARTED_AT}}" >> $GITHUB_OUTPUT
          echo "APP_URL=${{env.APP_URL}}" >> $GITHUB_OUTPUT
          echo "PULL_REQUEST_URL=${{env.PULL_REQUEST_URL}}" >> $GITHUB_OUTPUT

  merge-reports-slack-curl:
    if: ${{ !cancelled() }}
    needs: [install, playwright-tests]
    runs-on: ubuntu-latest
    env:
      PLAYWRIGHT_VERSION: ${{ needs.playwright-tests.outputs.playwright_version }}
      STARTED_AT: ${{ needs.playwright-tests.outputs.started_at }}
      APP_URL: ${{ needs.playwright-tests.outputs.app_url }}
      PULL_REQUEST_URL: ${{ needs.playwright-tests.outputs.pull_request_url }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - uses: actions/download-artifact@v4
      with:
        path: playwright-report/

    - name: Display structure of downloaded files
      run: ls -R

    - name: Run Report Merge
      run: npm run merge

    - name: Display structure of Merged
      run: ls -R

    - name: Read Summary Report to Get Test Results
      if: always()
      run: |
        STATUS=$(cat ./summary.json | jq -r '.status')
        STATUS="$(echo $STATUS | sed 's/failed/failure/;s/passed/success/')"
        echo "STATUS=$STATUS" >> $GITHUB_ENV
        PASSED=$(cat ./summary.json | jq -r '.passed[]' | tr '\n' ' ')
        echo "PASSED=$PASSED" >> $GITHUB_ENV
        TIMEOUT=$(cat ./summary.json | jq -r '.timedOut[]' | tr '\n' ' ' | sed 's/ /--->TIMEOUT /g')
        FAILURES=$(cat ./summary.json | jq -r '.failed[]' | tr '\n' ' ')
        SKIPPED=$(cat ./summary.json | jq -r '.skipped[]' | tr '\n' ' ')
        FLAKY=$(cat ./summary.json | jq -r '.flakey[]' | tr '\n' ' ')
        echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
        echo "FLAKY=$FLAKY" >> $GITHUB_ENV
        FAILURES+=$TIMEOUT
        echo "FAILURES=$FAILURES" >> $GITHUB_ENV

    - name: Download blob reports from GitHub Actions Artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-blob-reports
        pattern: blob-report-*
        merge-multiple: true

    - name: Merge into HTML Report
      run: npx playwright merge-reports --reporter html ./all-blob-reports

    - name: Copy Summary to html-report/ folder
      if: always()
      run: cp summary.json playwright-report/summary.json

    - name: Upload HTML report
      uses: actions/upload-artifact@v4
      with:
        name: html-report--attempt-${{ github.run_attempt }}
        path: playwright-report
        retention-days: 2

    - name: Output time taken
      if: always()
      run: |
        echo "Duration: $(($(($(date +%s) - ${{ env.STARTED_AT }}))/60)) minute(s)"
        echo "DURATION=$(($(($(date +%s) - ${{ env.STARTED_AT }}))/60))" >> $GITHUB_ENV

    - name: Send Slack Notification via curl
      if: always()
      env:
        STATUS: ${{ env.STATUS }}
        APP_URL: ${{ env.APP_URL }}
        AS_EVENT_NAME: ${{ github.event_name }}
        AS_REPO: ${{ github.repository }}
        DURATION: ${{ env.DURATION }}
        AS_WORKFLOW: "Playwright CI"
        PASSED: ${{ env.PASSED }}
        FAILURES: ${{ env.FAILURES }}
        SKIPPED: ${{ env.SKIPPED }}
        FLAKY: ${{ env.FLAKY }}
        PULL_REQUEST_URL: ${{ github.event.pull_request.html_url }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        TRIGGERED_BY=$(echo '[{"origin":"pull_request","new":"Pull Request"},{"origin":"schedule","new":"Schedule"},{"origin":"repository_dispatch","new":"Deploy"},{"origin":"workflow_dispatch","new":"GitHub Actions"}]' | jq -r --arg e "$AS_EVENT_NAME" '.[] | select(.origin==$e) | .new // $e')

        TOTAL_TESTS=$(echo "$FAILURES $PASSED" | grep -o ".spec.ts" | wc -l)
        PASSED_COUNT=$(echo "$PASSED" | grep -o ".spec.ts" | wc -l)
        FAILED_COUNT=$(echo "$FAILURES" | grep -o ".spec.ts" | wc -l)
        SKIPPED_COUNT=$(echo "$SKIPPED" | grep -o ".spec.ts" | wc -l)
        FLAKY_COUNT=$(echo "$FLAKY" | grep -o ".spec.ts" | wc -l)

        PAYLOAD=$(jq -n --arg color "$(if [[ "$STATUS" == "success" ]]; then echo "good"; else echo "danger"; fi)" \
                       --arg app "$APP_URL" \
                       --arg triggered "$TRIGGERED_BY" \
                       --arg repo "$AS_REPO" \
                       --arg duration "Took $DURATION minute(s)" \
                       --arg workflow "$AS_WORKFLOW" \
                       --arg total "$TOTAL_TESTS" \
                       --arg passed "$PASSED_COUNT" \
                       --arg failed "$FAILED_COUNT" \
                       --arg skipped "$SKIPPED_COUNT" \
                       --arg flakey "$FLAKY_COUNT" \
                       --arg pr "$PULL_REQUEST_URL" \
                       --arg failures "$FAILURE_FIELD" \
                       '{
                         attachments: [{
                           color: $color,
                           title: "Playwright Demo Automation Results Curl :test_tube:",
                           fields: [
                             {title: "Site Under Test", value: $app, short: true},
                             {title: "Triggered By", value: $triggered, short: true},
                             {title: "Repo", value: $repo, short: true},
                             {title: "Execution Time", value: $duration, short: true},
                             {title: "Workflow", value: $workflow, short: true},
                             {title: "Total Tests", value: $total, short: true},
                             {title: "Passed", value: $passed, short: true},
                             {title: "Failed", value: $failed, short: true},
                             {title: "Skipped", value: $skipped, short: true},
                             {title: "Flakey", value: $flakey, short: true},
                             {title: "Pull Request", value: $pr, short: false},
                             {title: "Failures", value: $failures, short: false}
                           ]
                         }]
                       }')

        curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" "$SLACK_WEBHOOK_URL"
