name: Playwright API Checks

on:
  # pull_request:
  # schedule:
  #   - cron: "0 6 * * *"
  workflow_dispatch:
jobs:
  install:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    outputs:
      playwright_version: ${{ steps.set-env.outputs.PLAYWRIGHT_VERSION }}
      started_at: ${{ steps.set-env.outputs.STARTED_AT}}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Set current date as env variable
        run: echo "STARTED_AT=$(date +%s)" >> $GITHUB_ENV

      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-modules-cache
        with:
          path: |
            node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - run: npm ci --ignore-scripts
        if: steps.node-modules-cache.outputs.cache-hit != 'true'

      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').dependencies['@playwright/test'].version)")" >> $GITHUB_ENV

      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - run: npx playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - run: npx playwright install-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Create Output for ENV Variables
        id: set-env
        run: |
          echo "PLAYWRIGHT_VERSION=${{env.PLAYWRIGHT_VERSION}}" >> $GITHUB_OUTPUT
          echo "STARTED_AT=${{env.STARTED_AT}}" >> $GITHUB_OUTPUT

  tests:
    name: Run Playwright Tests (${{ matrix.shardIndex }}/${{ strategy.job-total }})
    needs: install
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    outputs:
      playwright_version: ${{ steps.set-env.outputs.PLAYWRIGHT_VERSION }}
      started_at: ${{ steps.set-env.outputs.STARTED_AT}}

    env:
      PLAYWRIGHT_VERSION: ${{ needs.install.outputs.playwright_version }}
      STARTED_AT: ${{ needs.install.outputs.started_at }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: modules-${{ hashFiles('package-lock.json') }}

      - name: Cache Playwright
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      # - name: Install OS Dependencies (needed for Webkit)
      #   run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

      - name: Ensure playwright-report directory exists
        run: mkdir -p playwright-report

      - name: Upload results.json
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: results-${{ matrix.shardIndex }}
          path: test-results/results/results.json
          retention-days: 2

      - name: Upload Blob Report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: blob-report-${{ matrix.shardIndex }}
          path: blob-report
          retention-days: 1

      - name: Create Output for ENV Variables
        if: always()
        id: set-env
        run: |
          echo "PLAYWRIGHT_VERSION=${{env.PLAYWRIGHT_VERSION}}" >> $GITHUB_OUTPUT
          echo "STARTED_AT=${{env.STARTED_AT}}" >> $GITHUB_OUTPUT

  merge:
    name: Merge Reports
    if: ${{ always() }}
    needs: [install, tests]
    timeout-minutes: 60
    
    env:
      PLAYWRIGHT_VERSION: ${{ needs.tests.outputs.playwright_version }}
      STARTED_AT: ${{ needs.tests.outputs.started_at }}
    
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: modules-${{ hashFiles('package-lock.json') }}

      - name: Cache Playwright
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ hashFiles('package-lock.json') }}

      - uses: actions/download-artifact@v4
        with:
          path: playwright-report/

      - name: Display structure of downloaded files
        run: ls -R

      - name: Remove Previous html-report directory if exists
        run: rm -rf playwright-report/html-report

      # - name: Run Report Merge
      #   run: npm run merge

      - name: Display structure of Merged
        run: ls -R

      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-*
          merge-multiple: true

      - name: Merge into HTML Report
        run: npx playwright merge-reports --reporter html ./all-blob-reports

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: html-report--attempt-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 2

      - name: Display structure of Merged
        run: ls -R
      - name: Download all results.json artifacts
        uses: actions/download-artifact@v4
        with:
          path: merged-results

      - name: Merge results.json files
        run: |
          mkdir -p merged-results/final
          # Merge all results.json files into one
          npm run merge-playwright-results  

      - name: Upload merged results
        uses: actions/upload-artifact@v4
        with:
          name: merged-results
          path: merged-results/final/merged-results.json

      - name: Parse test results
        if: always()
        run: |
          results=$(cat merged-results/final/merged-results.json)
          stats=$(echo $results | jq .stats)
          total=$(echo $stats | jq '.expected + .unexpected + .skipped + .flaky')
          pass=$(echo $stats | jq '.expected')
          fail=$(echo $stats | jq '.unexpected')
          skip=$(echo $stats | jq '.skipped')
          flaky=$(echo $stats | jq '.flaky')
          duration=$(echo $stats | jq '.duration')

          # Convert milliseconds to seconds
          # duration_sec=$((duration / 1000))

          # # Calculate hours, minutes, seconds
          # hours=$((duration_sec / 3600))
          # minutes=$(((duration_sec % 3600) / 60))
          # seconds=$((duration_sec % 60))

          # # Format the result
          # duration_hms=$(printf '%02dh:%02dm:%02ds' $hours $minutes $seconds)

          # echo "Converted duration: $duration_hms"
          # # duration_hms=$(printf '%02dh:%02dm:%02ds' $(echo "$duration/3600" | bc) $(echo "($duration%3600)/60" | bc) $(echo "$duration%60" | bc))
          health=$((pass * 100 / total))
          echo "total=$total" >> $GITHUB_ENV
          echo "pass=$pass" >> $GITHUB_ENV
          echo "fail=$fail" >> $GITHUB_ENV
          echo "skip=$skip" >> $GITHUB_ENV
          echo "flaky=$flaky" >> $GITHUB_ENV
          echo "duration=$duration_hms" >> $GITHUB_ENV
          echo "health=$health" >> $GITHUB_ENV

      - name: Output time taken
        if: always()
        run: |
          echo "Duration: $(($(($(date +%s) - ${{ env.STARTED_AT }}))/60)) minute(s)"
          echo "DURATION=$(($(($(date +%s) - ${{ env.STARTED_AT }}))/60))" >> $GITHUB_ENV
          
      - name: Set Slack color based on job status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "SLACK_COLOR=good" >> $GITHUB_ENV
          else
            echo "SLACK_COLOR=danger" >> $GITHUB_ENV
          fi

      - name: Send Slack Notification via Webhook
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "attachments": [
              {
                "color": "'"${{ env.SLACK_COLOR }}"'",
                "title": "üöÄ :playwright: Playwright Test Results",
                "fields": [
                  { "title": "Site", "value": "'"${{ github.event.repository.name }}"'", "short": true },
                  { "title": "Triggered By", "value": "'"${{ github.event_name }}"'", "short": true },
                  { "title": "Repo", "value": "'"${{ github.repository }}"'", "short": true },
                  { "title": "Workflow", "value": "'"${{ github.workflow }}"'", "short": true },
                  { "title": "üõ†Ô∏è Job", "value": "'"${{ github.job }}"'", "short": true },
                  { "title": "üìä Total Tests", "value": "'"${{ env.total }}"'", "short": true },
                  { "title": "‚úÖ Passed", "value": "'"${{ env.pass }}"'", "short": true },
                  { "title": "‚ùå Failed", "value": "'"${{ env.fail }}"'", "short": true },
                  { "title": "‚ö†Ô∏è Skipped", "value": "'"${{ env.skip }}"'", "short": true },
                  { "title": "ü§∑ Flaky", "value": "'"${{ env.flaky }}"'", "short": true },
                  { "title": "ü©∫ Health", "value": "'"${{ env.health }}%"'", "short": true },
                  { "title": "‚è±Ô∏è Duration", "value": "Took ${{ env.DURATION }} minute(s)", "short": true },
                  {"title": "User", "value": "'"${{ github.actor }}"'", "short": true }
                ]
              }
            ]
          }' ${{ secrets.SLACK_WEBHOOK_URL }}